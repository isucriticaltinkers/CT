
BassDrumControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800100  00800100  0000049c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000045c  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c4  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ba  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000168  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022c  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000029c  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 31       	cpi	r26, 0x16	; 22
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define LED_ON_TIME			30
#define LED_FALL_TIME		10

int main(void)
{
	DDRD |= (1 << 2);
  90:	52 9a       	sbi	0x0a, 2	; 10
	//PORTD |= (1 << 2);
	
	//Initialize the LED output
	LED_init(LED_RISE_TIME, LED_ON_TIME, LED_FALL_TIME);
  92:	4a e0       	ldi	r20, 0x0A	; 10
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	6e e1       	ldi	r22, 0x1E	; 30
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 6e 00 	call	0xdc	; 0xdc <LED_init>
	
	//Initialize the piezo library
	Piezo_init(PIEZO_MIN_DURATION, &LED_trigger);
  a2:	6c e8       	ldi	r22, 0x8C	; 140
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	82 e3       	ldi	r24, 0x32	; 50
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 15 01 	call	0x22a	; 0x22a <Piezo_init>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x1e>

000000b0 <__setPWM>:
}

void __setPWM(uint8_t value) {
	static uint8_t pwmOn = 0;
	
	if(value > 0 && !pwmOn) {
  b0:	88 23       	and	r24, r24
  b2:	79 f0       	breq	.+30     	; 0xd2 <__setPWM+0x22>
  b4:	90 91 00 01 	lds	r25, 0x0100
  b8:	91 11       	cpse	r25, r1
  ba:	08 c0       	rjmp	.+16     	; 0xcc <__setPWM+0x1c>
		pwmOn = 1;
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	90 93 00 01 	sts	0x0100, r25
		
		//Enable PWM output
		DDRD |= (1 << LED_PIN);
  c2:	53 9a       	sbi	0x0a, 3	; 10
  c4:	03 c0       	rjmp	.+6      	; 0xcc <__setPWM+0x1c>
	}
	else if(pwmOn && value == 0) {
		pwmOn = 0;
  c6:	10 92 00 01 	sts	0x0100, r1
		
		//Disable PWM output
		DDRD &= ~(1 << LED_PIN);
  ca:	53 98       	cbi	0x0a, 3	; 10
	}
	
	//Set PWM value
	OCR2B = value;
  cc:	80 93 b4 00 	sts	0x00B4, r24
  d0:	08 95       	ret
		pwmOn = 1;
		
		//Enable PWM output
		DDRD |= (1 << LED_PIN);
	}
	else if(pwmOn && value == 0) {
  d2:	90 91 00 01 	lds	r25, 0x0100
  d6:	91 11       	cpse	r25, r1
  d8:	f6 cf       	rjmp	.-20     	; 0xc6 <__setPWM+0x16>
  da:	f8 cf       	rjmp	.-16     	; 0xcc <__setPWM+0x1c>

000000dc <LED_init>:
	uint16_t time;
} __ledStatus;

void LED_init(uint16_t riseTime, uint16_t onTime, uint16_t fallTime) {
	//Convert times from ms to timer overflows
	__times[0] = riseTime;
  dc:	90 93 05 01 	sts	0x0105, r25
  e0:	80 93 04 01 	sts	0x0104, r24
	__times[1] = onTime;
  e4:	70 93 07 01 	sts	0x0107, r23
  e8:	60 93 06 01 	sts	0x0106, r22
	__times[2] = fallTime;
  ec:	50 93 09 01 	sts	0x0109, r21
  f0:	40 93 08 01 	sts	0x0108, r20
	
	//Set status
	__ledStatus.state = OFF;
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	80 93 01 01 	sts	0x0101, r24
	
	//Set as input pin (PWM off)
	DDRD &= ~(1 << LED_PIN);
  fa:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(1 << LED_PIN);
  fc:	5b 98       	cbi	0x0b, 3	; 11
	
	//Non-inverting PWM output on OC2B
	//WGM mode 3
	TCCR2A = (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
  fe:	93 e2       	ldi	r25, 0x23	; 35
 100:	90 93 b0 00 	sts	0x00B0, r25
	
	//Prescalar=8
	TCCR2B = (1 << CS21);
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	90 93 b1 00 	sts	0x00B1, r25
	
	//Configure timer0 for 1ms updates
	//Normal mode
	//Prescalar=64
	TCCR0A = 0;//(1 << WGM01);
 10a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 <<CS01) | (1 << CS00);
 10c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = OCIE0A;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 6e 00 	sts	0x006E, r24
		
	sei();
 114:	78 94       	sei
 116:	08 95       	ret

00000118 <LED_trigger>:
}

void LED_trigger() {
	__ledStatus.state = RISING;
 118:	10 92 01 01 	sts	0x0101, r1
	__ledStatus.time = __times[0];
 11c:	80 91 04 01 	lds	r24, 0x0104
 120:	90 91 05 01 	lds	r25, 0x0105
 124:	90 93 03 01 	sts	0x0103, r25
 128:	80 93 02 01 	sts	0x0102, r24
 12c:	08 95       	ret

0000012e <__vector_16>:
	
	//Set PWM value
	OCR2B = value;
}

ISR(TIMER0_OVF_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	PORTD ^= (1 << 2);
 150:	9b b1       	in	r25, 0x0b	; 11
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	89 27       	eor	r24, r25
 156:	8b b9       	out	0x0b, r24	; 11
	
	if(__ledStatus.state != OFF) {
 158:	20 91 01 01 	lds	r18, 0x0101
 15c:	23 30       	cpi	r18, 0x03	; 3
 15e:	09 f4       	brne	.+2      	; 0x162 <__vector_16+0x34>
 160:	53 c0       	rjmp	.+166    	; 0x208 <__vector_16+0xda>
		__ledStatus.time--;
 162:	e2 e0       	ldi	r30, 0x02	; 2
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	91 83       	std	Z+1, r25	; 0x01
 16e:	80 83       	st	Z, r24
		
		if(__ledStatus.time == 0) {
 170:	89 2b       	or	r24, r25
 172:	91 f4       	brne	.+36     	; 0x198 <__vector_16+0x6a>
			//Go to next state
			__ledStatus.state++;
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	20 93 01 01 	sts	0x0101, r18
			
			if(__ledStatus.state != OFF) {
 17a:	23 30       	cpi	r18, 0x03	; 3
 17c:	09 f4       	brne	.+2      	; 0x180 <__vector_16+0x52>
 17e:	41 c0       	rjmp	.+130    	; 0x202 <__vector_16+0xd4>
				//Load the new state time
				__ledStatus.time = __times[(uint8_t)__ledStatus.state];
 180:	e2 2f       	mov	r30, r18
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	ec 5f       	subi	r30, 0xFC	; 252
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	90 93 03 01 	sts	0x0103, r25
 194:	80 93 02 01 	sts	0x0102, r24
			}
		}
		
		switch(__ledStatus.state) {
 198:	80 91 01 01 	lds	r24, 0x0101
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	c9 f0       	breq	.+50     	; 0x1d2 <__vector_16+0xa4>
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <__vector_16+0x7a>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	d1 f0       	breq	.+52     	; 0x1da <__vector_16+0xac>
 1a6:	2d c0       	rjmp	.+90     	; 0x202 <__vector_16+0xd4>
			case RISING:
				__setPWM(255 - 255L * __ledStatus.time / __times[0]);
 1a8:	20 91 02 01 	lds	r18, 0x0102
 1ac:	30 91 03 01 	lds	r19, 0x0103
 1b0:	af ef       	ldi	r26, 0xFF	; 255
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__umulhisi3>
 1b8:	20 91 04 01 	lds	r18, 0x0104
 1bc:	30 91 05 01 	lds	r19, 0x0105
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	0e 94 c2 01 	call	0x384	; 0x384 <__divmodsi4>
 1c8:	82 2f       	mov	r24, r18
 1ca:	80 95       	com	r24
 1cc:	0e 94 58 00 	call	0xb0	; 0xb0 <__setPWM>
			break;
 1d0:	1b c0       	rjmp	.+54     	; 0x208 <__vector_16+0xda>
			
			case ON:
				__setPWM(255);
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	0e 94 58 00 	call	0xb0	; 0xb0 <__setPWM>
			break;
 1d8:	17 c0       	rjmp	.+46     	; 0x208 <__vector_16+0xda>
			
			case FALLING:
				__setPWM(255L * __ledStatus.time / __times[2]);
 1da:	20 91 02 01 	lds	r18, 0x0102
 1de:	30 91 03 01 	lds	r19, 0x0103
 1e2:	af ef       	ldi	r26, 0xFF	; 255
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__umulhisi3>
 1ea:	20 91 08 01 	lds	r18, 0x0108
 1ee:	30 91 09 01 	lds	r19, 0x0109
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	0e 94 c2 01 	call	0x384	; 0x384 <__divmodsi4>
 1fa:	82 2f       	mov	r24, r18
 1fc:	0e 94 58 00 	call	0xb0	; 0xb0 <__setPWM>
			break;
 200:	03 c0       	rjmp	.+6      	; 0x208 <__vector_16+0xda>
			
			default:
				__setPWM(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 58 00 	call	0xb0	; 0xb0 <__setPWM>
			break;
		}
	}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <Piezo_init>:
static PiezoHandler __handler;

static uint16_t __overflows;
static uint32_t __lastTime;

void Piezo_init(uint16_t minDuration, PiezoHandler handler) {
 22a:	ab 01       	movw	r20, r22
	//Convert from ms to timer ticks
	__minDuration = (uint32_t)minDuration * 16000L / 256;
 22c:	9c 01       	movw	r18, r24
 22e:	a0 e8       	ldi	r26, 0x80	; 128
 230:	be e3       	ldi	r27, 0x3E	; 62
 232:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__umulhisi3>
 236:	bb 27       	eor	r27, r27
 238:	a9 2f       	mov	r26, r25
 23a:	98 2f       	mov	r25, r24
 23c:	87 2f       	mov	r24, r23
 23e:	80 93 12 01 	sts	0x0112, r24
 242:	90 93 13 01 	sts	0x0113, r25
 246:	a0 93 14 01 	sts	0x0114, r26
 24a:	b0 93 15 01 	sts	0x0115, r27
	__handler = handler;
 24e:	50 93 11 01 	sts	0x0111, r21
 252:	40 93 10 01 	sts	0x0110, r20
	__overflows = 0;
 256:	10 92 0f 01 	sts	0x010F, r1
 25a:	10 92 0e 01 	sts	0x010E, r1
	__lastTime = 0;
 25e:	10 92 0a 01 	sts	0x010A, r1
 262:	10 92 0b 01 	sts	0x010B, r1
 266:	10 92 0c 01 	sts	0x010C, r1
 26a:	10 92 0d 01 	sts	0x010D, r1
	
	
	//Enable GPIO input
	DDRB &= ~(1 << 0);
 26e:	20 98       	cbi	0x04, 0	; 4
	PORTB &= ~(1 << 0);
 270:	28 98       	cbi	0x05, 0	; 5
	
	//Normal operation, no outputs
	TCCR1A = 0;
 272:	10 92 80 00 	sts	0x0080, r1
	
	//Enable input capture noise canceler
	//Trigger on rising edge
	//Prescalar=256
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS12);
 276:	84 ec       	ldi	r24, 0xC4	; 196
 278:	80 93 81 00 	sts	0x0081, r24
	
	//Clear bits (only active in OC mode)
	TCCR1C = 0;
 27c:	10 92 82 00 	sts	0x0082, r1
	
	//Clear timer
	TCNT1 = 0;
 280:	10 92 85 00 	sts	0x0085, r1
 284:	10 92 84 00 	sts	0x0084, r1
	
	//Clear the interrupt flags
	TIFR1 |= (1 << ICF1) | (1 << TOV1);
 288:	86 b3       	in	r24, 0x16	; 22
 28a:	81 62       	ori	r24, 0x21	; 33
 28c:	86 bb       	out	0x16, r24	; 22
	
	//Set input capture, overflow interrupt mask
	TIMSK1 = (1 << ICIE1) | (1 << TOIE1);
 28e:	81 e2       	ldi	r24, 0x21	; 33
 290:	80 93 6f 00 	sts	0x006F, r24
	
	//Enable global interrupts
	sei();
 294:	78 94       	sei
 296:	08 95       	ret

00000298 <__vector_13>:
}

ISR(TIMER1_OVF_vect) {
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
	//Timer1 overflow
	__overflows++;
 2a6:	80 91 0e 01 	lds	r24, 0x010E
 2aa:	90 91 0f 01 	lds	r25, 0x010F
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	90 93 0f 01 	sts	0x010F, r25
 2b4:	80 93 0e 01 	sts	0x010E, r24
}
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_10>:

ISR(TIMER1_CAPT_vect) {
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	//Timer1 input capture

	//Calculate current timestamp
	uint32_t curTime = ICR1 + ((uint32_t)__overflows << 16);
 2ec:	20 91 86 00 	lds	r18, 0x0086
 2f0:	30 91 87 00 	lds	r19, 0x0087
 2f4:	80 91 0e 01 	lds	r24, 0x010E
 2f8:	90 91 0f 01 	lds	r25, 0x010F
 2fc:	a0 e0       	ldi	r26, 0x00	; 0
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	dc 01       	movw	r26, r24
 302:	99 27       	eor	r25, r25
 304:	88 27       	eor	r24, r24
 306:	82 0f       	add	r24, r18
 308:	93 1f       	adc	r25, r19
 30a:	a1 1d       	adc	r26, r1
 30c:	b1 1d       	adc	r27, r1
	
	//Compare to last time
	if((curTime - __lastTime) >= __minDuration) {
 30e:	40 91 0a 01 	lds	r20, 0x010A
 312:	50 91 0b 01 	lds	r21, 0x010B
 316:	60 91 0c 01 	lds	r22, 0x010C
 31a:	70 91 0d 01 	lds	r23, 0x010D
 31e:	8c 01       	movw	r16, r24
 320:	9d 01       	movw	r18, r26
 322:	04 1b       	sub	r16, r20
 324:	15 0b       	sbc	r17, r21
 326:	26 0b       	sbc	r18, r22
 328:	37 0b       	sbc	r19, r23
 32a:	40 91 12 01 	lds	r20, 0x0112
 32e:	50 91 13 01 	lds	r21, 0x0113
 332:	60 91 14 01 	lds	r22, 0x0114
 336:	70 91 15 01 	lds	r23, 0x0115
 33a:	04 17       	cp	r16, r20
 33c:	15 07       	cpc	r17, r21
 33e:	26 07       	cpc	r18, r22
 340:	37 07       	cpc	r19, r23
 342:	68 f0       	brcs	.+26     	; 0x35e <__vector_10+0x98>
		__lastTime = curTime;
 344:	80 93 0a 01 	sts	0x010A, r24
 348:	90 93 0b 01 	sts	0x010B, r25
 34c:	a0 93 0c 01 	sts	0x010C, r26
 350:	b0 93 0d 01 	sts	0x010D, r27
		
		//Call the event handler
		__handler();
 354:	e0 91 10 01 	lds	r30, 0x0110
 358:	f0 91 11 01 	lds	r31, 0x0111
 35c:	09 95       	icall
	}
	
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__divmodsi4>:
 384:	05 2e       	mov	r0, r21
 386:	97 fb       	bst	r25, 7
 388:	1e f4       	brtc	.+6      	; 0x390 <__divmodsi4+0xc>
 38a:	00 94       	com	r0
 38c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__negsi2>
 390:	57 fd       	sbrc	r21, 7
 392:	07 d0       	rcall	.+14     	; 0x3a2 <__divmodsi4_neg2>
 394:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodsi4>
 398:	07 fc       	sbrc	r0, 7
 39a:	03 d0       	rcall	.+6      	; 0x3a2 <__divmodsi4_neg2>
 39c:	4e f4       	brtc	.+18     	; 0x3b0 <__divmodsi4_exit>
 39e:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__negsi2>

000003a2 <__divmodsi4_neg2>:
 3a2:	50 95       	com	r21
 3a4:	40 95       	com	r20
 3a6:	30 95       	com	r19
 3a8:	21 95       	neg	r18
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	4f 4f       	sbci	r20, 0xFF	; 255
 3ae:	5f 4f       	sbci	r21, 0xFF	; 255

000003b0 <__divmodsi4_exit>:
 3b0:	08 95       	ret

000003b2 <__negsi2>:
 3b2:	90 95       	com	r25
 3b4:	80 95       	com	r24
 3b6:	70 95       	com	r23
 3b8:	61 95       	neg	r22
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8f 4f       	sbci	r24, 0xFF	; 255
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__umulhisi3>:
 3c2:	a2 9f       	mul	r26, r18
 3c4:	b0 01       	movw	r22, r0
 3c6:	b3 9f       	mul	r27, r19
 3c8:	c0 01       	movw	r24, r0
 3ca:	a3 9f       	mul	r26, r19
 3cc:	70 0d       	add	r23, r0
 3ce:	81 1d       	adc	r24, r1
 3d0:	11 24       	eor	r1, r1
 3d2:	91 1d       	adc	r25, r1
 3d4:	b2 9f       	mul	r27, r18
 3d6:	70 0d       	add	r23, r0
 3d8:	81 1d       	adc	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	91 1d       	adc	r25, r1
 3de:	08 95       	ret

000003e0 <__udivmodsi4>:
 3e0:	a1 e2       	ldi	r26, 0x21	; 33
 3e2:	1a 2e       	mov	r1, r26
 3e4:	aa 1b       	sub	r26, r26
 3e6:	bb 1b       	sub	r27, r27
 3e8:	fd 01       	movw	r30, r26
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__udivmodsi4_ep>

000003ec <__udivmodsi4_loop>:
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	ee 1f       	adc	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	a2 17       	cp	r26, r18
 3f6:	b3 07       	cpc	r27, r19
 3f8:	e4 07       	cpc	r30, r20
 3fa:	f5 07       	cpc	r31, r21
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__udivmodsi4_ep>
 3fe:	a2 1b       	sub	r26, r18
 400:	b3 0b       	sbc	r27, r19
 402:	e4 0b       	sbc	r30, r20
 404:	f5 0b       	sbc	r31, r21

00000406 <__udivmodsi4_ep>:
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	1a 94       	dec	r1
 410:	69 f7       	brne	.-38     	; 0x3ec <__udivmodsi4_loop>
 412:	60 95       	com	r22
 414:	70 95       	com	r23
 416:	80 95       	com	r24
 418:	90 95       	com	r25
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	bd 01       	movw	r22, r26
 420:	cf 01       	movw	r24, r30
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
